{"version":3,"sources":["src/weather.js"],"names":["WEATHER_URL","API_KEY","weather","document","querySelector","getWeather","lat","latitude","lon","longitude","url","then","res","json","temperature","main","temp","place","name","innerText","saveCoords","coordsObj","setItem","JSON","stringify","handleSuccess","coords","log","handleError","error","askLocation","geolocation","getCurrentPosition","loadCoords","parse","localStorage","getItem","weatherInit"],"mappings":";AAAA,IAAMA,EAAe,mCACfC,EAAU,mCACVC,EAAUC,SAASC,cAAc,eAEjCC,EAAa,SAAqC,GAAzBC,IAAAA,EAAVC,EAAAA,SAA0BC,EAAXC,EAAAA,UAE1BC,MAD6DJ,uDAAAA,EAAWE,QAAAA,EAAaP,UAAAA,EAA3F,iBACWU,KAAK,SAAA,GAAOC,OAAAA,EAAIC,SAAQF,KAC/B,SAAQ,GACEG,IAAAA,EAAcD,EAAKE,KAAKC,KACxBC,EAAQJ,EAAKK,KACXC,EAAAA,UAAeL,EAAiBG,MAAAA,KAK9CG,EAAa,SAACC,GACHC,aAAAA,QAAQ,SAAUC,KAAKC,UAAUH,IACnCA,EAAAA,IAGTI,EAAgB,SAAqC,GAAnCC,IAAAA,EAAAA,EAAAA,OAASnB,EAAAA,EAAAA,SAAUE,EAAAA,EAAAA,UAC/BkB,QAAAA,IAAIpB,EAAUE,GACX,EAAA,CAACF,SAAD,EAAWE,UAAX,KAGTmB,EAAc,WACRC,QAAAA,MAAM,0BAGZC,EAAc,WACNC,UAAAA,YAAYC,mBAAmBP,EAAeG,IAGtDK,EAAa,WACXZ,IAAAA,EAAYE,KAAKW,MAAMC,aAAaC,QAAQ,WAC5Cf,GACQM,QAAAA,IAAIN,GACDA,EAAAA,IAEXS,KAIFO,EAAc,WAChBJ,KAEJI","file":"weather.82a6f8fe.map","sourceRoot":"..","sourcesContent":["const WEATHER_URL =  \"https://home.openweathermap.org/\"\nconst API_KEY = \"04fbe5903fb0ab8181b13029d8a515c8\"\nconst weather = document.querySelector(\".weather h1\")\n\nconst getWeather = ({latitude: lat, longitude: lon}) => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`\n    fetch(url).then(res => res.json()).then(\n        json => {\n            const temperature = json.main.temp;\n            const place = json.name;\n            weather.innerText = `${temperature} @ ${place}`\n        }\n    )\n}\n\nconst saveCoords = (coordsObj) => {\n    localStorage.setItem(\"COORDS\", JSON.stringify(coordsObj));\n    getWeather(coordsObj);\n}\n\nconst handleSuccess = ({coords: {latitude, longitude}}) => {\n    console.log(latitude, longitude);\n    saveCoords({latitude, longitude});\n}\n\nconst handleError = () => {\n    console.error(\"can not get location.\")\n}\n\nconst askLocation = () => {\n    navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\n}\n\nconst loadCoords = () => {\n    let coordsObj = JSON.parse(localStorage.getItem(\"COORDS\"));\n    if (coordsObj) {\n        console.log(coordsObj);\n        getWeather(coordsObj);\n    } else {\n        askLocation();\n    }\n}\n\nconst weatherInit = () => {\n    loadCoords();\n}\nweatherInit();"]}